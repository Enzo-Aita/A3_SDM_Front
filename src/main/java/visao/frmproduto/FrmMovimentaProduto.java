
package visao.frmproduto;



import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import modelo.Produto;
import modelo.MovimentaEstoque;
import visao.Mensagem;



public class FrmMovimentaProduto extends javax.swing.JFrame {

    private MovimentaEstoque movimentaEstoque;
    private Produto objetoproduto;

    public FrmMovimentaProduto() {
        initComponents();
         this.setTitle("Controle de Movimentação de Produtos");
        this.objetoproduto = new Produto();
        this.movimentaEstoque = new MovimentaEstoque();
        this.carregaTabela();
        
    }
    public void carregaTabela() {
        DefaultTableModel modelo = (DefaultTableModel) this.JTableProduto.getModel();
        modelo.setNumRows(0);
        
        List<Produto> produtos = objetoproduto.getMinhaLista();
        for (Produto p : produtos) {
            modelo.addRow(new Object[]{
                p.getId(),
                p.getProduto(),
                String.format("R$ %.2f", p.getPreco()),
                p.getCategoria(),
                p.getQuantidade(),
                p.getQuantidademax(),
                p.getQuantidademin(),
                getStatusEstoque(p)
            });
        }
    }
    
     private String getStatusEstoque(Produto p) {
        if (p.getQuantidade() < p.getQuantidademin()) {
            return "ESTOQUE BAIXO";
        } else if (p.getQuantidade() > p.getQuantidademax()) {
            return "ESTOQUE ALTO";
        }
        return "NORMAL";
    }
     
     private void mostrarHistorico(int idProduto) {
       try {
        String nomeProduto = "";
        for (int i = 0; i < JTableProduto.getRowCount(); i++) {
            if ((int)JTableProduto.getValueAt(i, 0) == idProduto) {
                nomeProduto = JTableProduto.getValueAt(i, 1).toString();
                break;
            }
        }
        
        List<Map<String, Object>> historico = movimentaEstoque.getHistoricoPorProduto(idProduto);
        
        if (historico.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Nenhuma movimentação encontrada para este produto.", 
                "Histórico: " + nomeProduto, 
                JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Data/Hora");
        model.addColumn("Tipo");
        model.addColumn("Quantidade");
        model.addColumn("Observação");
        
        for (Map<String, Object> mov : historico) {
            model.addRow(new Object[]{
                mov.get("data_hora"),
                mov.get("tipo"),
                mov.get("quantidade"),
                mov.get("observacao") != null ? mov.get("observacao") : ""
            });
        }
        
        JTable JBHistorico = new JTable(model);
        JBHistorico.setFillsViewportHeight(true);
        
        JScrollPane scrollPane = new JScrollPane(JBHistorico);
        scrollPane.setPreferredSize(new Dimension(600, 400));
        
        JOptionPane.showMessageDialog(this, scrollPane, 
            "Histórico: " + nomeProduto, JOptionPane.PLAIN_MESSAGE);
            
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Erro ao carregar histórico: " + e.getMessage(), 
            "Erro", JOptionPane.ERROR_MESSAGE);
    }
}
     
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        JTableProduto = new javax.swing.JTable();
        JBAdicionar = new javax.swing.JButton();
        JBSubtrair = new javax.swing.JButton();
        JBCancelar = new javax.swing.JButton();
        JBHistorico = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        JTableProduto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Produto", "Preço", "Categoria", "Quantidade", "Quantidade Máxima", "QuantidadeMínima", "Status"
            }
        ));
        JTableProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTableProdutoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JTableProduto);

        JBAdicionar.setText("Entrada");
        JBAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBAdicionarActionPerformed(evt);
            }
        });

        JBSubtrair.setText("Saída");
        JBSubtrair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBSubtrairActionPerformed(evt);
            }
        });

        JBCancelar.setText("Cancelar");
        JBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBCancelarActionPerformed(evt);
            }
        });

        JBHistorico.setText("Histórico");
        JBHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBHistoricoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(JBAdicionar)
                .addGap(30, 30, 30)
                .addComponent(JBSubtrair)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JBHistorico)
                .addGap(29, 29, 29)
                .addComponent(JBCancelar)
                .addGap(123, 123, 123))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBAdicionar)
                    .addComponent(JBSubtrair)
                    .addComponent(JBCancelar)
                    .addComponent(JBHistorico))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBAdicionarActionPerformed
       try {
            int linhaSelecionada = JTableProduto.getSelectedRow();
            if (linhaSelecionada == -1) {
                throw new Mensagem("Selecione um produto na tabela");
            }
            
            int id = Integer.parseInt(JTableProduto.getValueAt(linhaSelecionada, 0).toString());
            String nomeProduto = JTableProduto.getValueAt(linhaSelecionada, 1).toString();
            
            String quantidadeStr = JOptionPane.showInputDialog(this, 
                "Quantidade a adicionar:", "Entrada no Estoque - " + nomeProduto, JOptionPane.QUESTION_MESSAGE);
            
            if (quantidadeStr == null || quantidadeStr.trim().isEmpty()) return;
            
            int quantidade = Integer.parseInt(quantidadeStr);
            String observacao = JOptionPane.showInputDialog(this, 
                "Observação (opcional):", "Registrar Entrada", JOptionPane.QUESTION_MESSAGE);
            
            String resultado = movimentaEstoque.movimentarEstoque(id, quantidade, true, observacao);
            JOptionPane.showMessageDialog(this, resultado);
            
            carregaTabela();
            mostrarHistorico(id);
            
        } catch (Mensagem e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Informe um valor numérico válido", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_JBAdicionarActionPerformed

    private void JBSubtrairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBSubtrairActionPerformed
       try {
            int linhaSelecionada = JTableProduto.getSelectedRow();
            if (linhaSelecionada == -1) {
                throw new Mensagem("Selecione um produto na tabela");
            }
            
            int id = Integer.parseInt(JTableProduto.getValueAt(linhaSelecionada, 0).toString());
            String nomeProduto = JTableProduto.getValueAt(linhaSelecionada, 1).toString();
            
            String quantidadeStr = JOptionPane.showInputDialog(this, 
                "Quantidade a remover:", "Saída do Estoque - " + nomeProduto, JOptionPane.QUESTION_MESSAGE);
            
            if (quantidadeStr == null || quantidadeStr.trim().isEmpty()) return;
            
            int quantidade = Integer.parseInt(quantidadeStr);
            String observacao = JOptionPane.showInputDialog(this, 
                "Observação (opcional):", "Registrar Saída", JOptionPane.QUESTION_MESSAGE);
            
            String resultado = movimentaEstoque.movimentarEstoque(id, quantidade, false, observacao);
            JOptionPane.showMessageDialog(this, resultado);
            
            carregaTabela();
            mostrarHistorico(id);
            
        } catch (Mensagem e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Informe um valor numérico válido", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_JBSubtrairActionPerformed

    private void JBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_JBCancelarActionPerformed

    private void JTableProdutoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTableProdutoMouseClicked
        
    }//GEN-LAST:event_JTableProdutoMouseClicked

    private void JBHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBHistoricoActionPerformed
int linhaSelecionada = JTableProduto.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um produto para ver o histórico", 
                "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int id = Integer.parseInt(JTableProduto.getValueAt(linhaSelecionada, 0).toString());
        mostrarHistorico(id);       
    }//GEN-LAST:event_JBHistoricoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMovimentaProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMovimentaProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMovimentaProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMovimentaProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmMovimentaProduto().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBAdicionar;
    private javax.swing.JButton JBCancelar;
    private javax.swing.JButton JBHistorico;
    private javax.swing.JButton JBSubtrair;
    private javax.swing.JTable JTableProduto;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
